// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Versions: <i>Tableau Server 2021.1 / Tableau Cloud March 2022 and later</i>
# 
#  This documentation describes the growing number OpenAPI endpoints  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.
# 
#  There are some differences users of the classic endpoints will recognize when viewing these new endpoints.
# 
#  - Request bodies for these new REST endpoints must  be formatted using JSON.
# 
#  - Endpoint URIs may contain a hyphen ('-') instead of an API version number, indicating that the resource is versioned separately from the numbered API release. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).
# 
#  > Starting in Tableau Server 2022.1 / Tableau Cloud March 2022, differences between releases will be noted in this reference.To view the previous version of this reference, see [Tableau REST API OpenAPI Endpoints (v2021.4)](https://help.tableau.com/current/api/rest_api/en-us/REST/TAG/index.html#operation/addAnalyticsExtensionsConnection).
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "https://tableau.example.com") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/askdata/lenses/[string lens_id](LensService_deleteLensHeaders headers = {}) returns tableau\.nlp\.lens\.publicrest\.v1\.GetLensResponse|error {
        string resourcePath = string `/api/-/askdata/lenses/${getEncodedUri(lens_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/auth\-configurations/[int:Signed32 id](AuthnService_DeleteAuthConfigurationHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/identity\-pools/[string uuid](AuthnService_DeleteIdentityPoolHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/identity\-stores/[int:Signed32 id](AuthnService_DeleteIdentityStoreTAGHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/identity-stores/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/pulse/definitions/[string definition_id](MetricQueryService_DeleteDefinitionHeaders headers = {}) returns error? {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definition_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete metric
    #
    # + metric_id - _(Required)_ The LUID of the metric to be deleted.
    # + headers - Headers to be sent with the request 
    # + return - Successful! 
    resource isolated function delete api/\-/pulse/metrics/[string metric_id](MetricQueryService_DeleteMetricHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metric_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/pulse/subscriptions/[string id](PulseSubscriptionService_DeleteSubscriptionHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/pulse/subscriptions/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Unblock dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/server/extensions/dashboard/blockListItems/[string block_list_item_luid](DashboardExtensionsServerSettingsService_deleteDashboardExtensionsBlockListItemHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems/${getEncodedUri(block_list_item_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete analytics extension connection from site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/analytics/connections/[string connection_luid](AnalyticsExtensionsService_deleteAnalyticsExtensionsConnectionHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connection_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Remove current analytics extension connection for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/analytics/workbooks/[string workbook_luid]/selected_connection(AnalyticsExtensionsService_deleteConnectionFromWorkbookHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbook_luid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Disallow dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/dashboard/safeListItems/[string safe_list_item_luid](DashboardExtensionsSiteSettingsService_deleteDashboardExtensionsSafeListItemHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems/${getEncodedUri(safe_list_item_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # List ask data lenses in site - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/askdata/lenses(LensService_listLensesHeaders headers = {}) returns tableau\.nlp\.lens\.publicrest\.v1\.ListLensesResponse|error {
        string resourcePath = string `/api/-/askdata/lenses`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/askdata/lenses/[string lens_id](LensService_getLensHeaders headers = {}) returns tableau\.nlp\.lens\.publicrest\.v1\.GetLensResponse|error {
        string resourcePath = string `/api/-/askdata/lenses/${getEncodedUri(lens_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/auth\-configurations(AuthnService_ListAuthConfigurationsHeaders headers = {}) returns tableau\.authn\.v1\.ListAuthConfigurationsResponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/identity\-pools(map<string|string[]> headers = {}) returns tableau\.authn\.v1\.ListIdentityPoolsResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/authn\-service/identity\-pools/[string uuid](AuthnService_FindIdentityPoolByUuidHeaders headers = {}) returns tableau\.authn\.v1\.FindIdentityPoolByUuidResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/identity\-stores(AuthnService_ListIdentityStoresTAGHeaders headers = {}) returns tableau\.authn\.v1\.ListIdentityStoresResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-stores`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get usage statistics for content item
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/content/usage\-stats/[string 'type]/[string luid](UsageStatsService_GetUsageStatsHeaders headers = {}) returns tableau\.usagestats\.v1\.UsageStats|error {
        string resourcePath = string `/api/-/content/usage-stats/${getEncodedUri('type)}/${getEncodedUri(luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List metric definitions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions(MetricQueryService_ListDefinitionsHeaders headers = {}, *MetricQueryService_ListDefinitionsQueries queries) returns tableau\.metricqueryservice\.v1\.ListDefinitionsResponse|error {
        string resourcePath = string `/api/-/pulse/definitions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get metric definition
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions/[string definition_id](MetricQueryService_GetDefinitionHeaders headers = {}, *MetricQueryService_GetDefinitionQueries queries) returns tableau\.metricqueryservice\.v1\.GetDefinitionResponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definition_id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List metrics in definition
    #
    # + definition_id - _(Required)_ The LUID of the metric definition.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions/[string definition_id]/metrics(MetricQueryService_ListMetricsHeaders headers = {}, *MetricQueryService_ListMetricsQueries queries) returns tableau\.metricqueryservice\.v1\.ListMetricsResponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definition_id)}/metrics`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/definitions\:batchGet(MetricQueryService_BatchGetDefinitionsHeaders headers = {}, *MetricQueryService_BatchGetDefinitionsQueries queries) returns tableau\.metricqueryservice\.v1\.BatchGetDefinitionsResponse|error {
        string resourcePath = string `/api/-/pulse/definitions:batchGet`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get site entitlements
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/entitlements(MetricQueryService_GetEntitlementsHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.GetEntitlementsResponse|error {
        string resourcePath = string `/api/-/pulse/entitlements`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get metric
    #
    # + metric_id - _(Required)_ The LUID of the metric to get.
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/metrics/[string metric_id](MetricQueryService_GetMetricHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.GetMetricResponse|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metric_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/metrics\:batchGet(MetricQueryService_BatchGetMetricsHeaders headers = {}, *MetricQueryService_BatchGetMetricsQueries queries) returns tableau\.metricqueryservice\.v1\.BatchGetMetricsResponse|error {
        string resourcePath = string `/api/-/pulse/metrics:batchGet`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/metrics\:followedMetricsGroups(PulseSubscriptionService_ListFollowedMetricsGroupsHeaders headers = {}, *PulseSubscriptionService_ListFollowedMetricsGroupsQueries queries) returns tableau\.pulse\.subscriptionservice\.v1\.ListFollowedMetricsGroupsResponse|error {
        string resourcePath = string `/api/-/pulse/metrics:followedMetricsGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List subscriptions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/subscriptions(PulseSubscriptionService_ListSubscriptionsHeaders headers = {}, *PulseSubscriptionService_ListSubscriptionsQueries queries) returns tableau\.pulse\.subscriptionservice\.v1\.ListSubscriptionsResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/subscriptions/[string id](PulseSubscriptionService_GetSubscriptionHeaders headers = {}) returns tableau\.pulse\.subscriptionservice\.v1\.GetSubscriptionResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/subscriptions\:batchGet(PulseSubscriptionService_BatchGetSubscriptionsHeaders headers = {}) returns tableau\.pulse\.subscriptionservice\.v1\.BatchGetSubscriptionsResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchGet`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/subscriptions\:batchGetMetricFollowerCounts(PulseSubscriptionService_BatchGetMetricFollowerCountsHeaders headers = {}, *PulseSubscriptionService_BatchGetMetricFollowerCountsQueries queries) returns tableau\.pulse\.subscriptionservice\.v1\.BatchGetMetricFollowerCountsResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchGetMetricFollowerCounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get content search results
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success <br /> <br /> Search requests return a JSON response body containing two forms of metadata: <br/><br/> -  **Metadata describing the search request**. <br />These properties are at the top level of the JSON hierarchy of the response body. To learn more, expand this 200 response section. <br/><br/> - **Metadata describing the items returned by the search**.<br /> Attributes shown for a given item in the 'items' array vary by the content type of the item (workbook, datasource, flow, ...), and include the full range of available attributes for that content type. 
    resource isolated function get api/\-/search(map<string|string[]> headers = {}, *ContentExplorationService_getSearchQueries queries) returns tableau\.search\.PageOfContentResponse|error {
        string resourcePath = string `/api/-/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get enabled state of analytics extensions on server
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/analytics(AnalyticsExtensionsService_getAnalyticsExtensionsServerSettingsHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ServerSettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List settings for dashboard extensions on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard(DashboardExtensionsServerSettingsService_getDashboardExtensionsServerSettingsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.ServerSettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List blocked dashboard extensions on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard/blockListItems(DashboardExtensionsServerSettingsService_getDashboardExtensionsBlockListItemsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.BlockListItems|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get blocked dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard/blockListItems/[string block_list_item_luid](DashboardExtensionsServerSettingsService_getDashboardExtensionsBlockListItemHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.BlockListItem|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems/${getEncodedUri(block_list_item_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get enabled state of analytics extensions on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics(AnalyticsExtensionsService_getAnalyticsExtensionsSiteSettingsHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.SiteSettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List analytics extension connections on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/connections(AnalyticsExtensionsService_getAnalyticsExtensionsConnectionsHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionMetadataList|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get analytics extension details
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/connections/[string connection_luid](AnalyticsExtensionsService_getAnalyticsExtensionsConnectionHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionItem|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connection_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List analytics extension connections of workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/workbooks/[string workbook_luid]/connections(AnalyticsExtensionsService_getConnectionOptionsForWorkbookHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionMetadataList|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbook_luid)}/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get current analytics extension for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/workbooks/[string workbook_luid]/selected_connection(AnalyticsExtensionsService_getSelectedConnectionForWorkbookHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionMetadataList|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbook_luid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List dashboard extension settings of site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard(DashboardExtensionsSiteSettingsService_getDashboardExtensionsSiteSettingsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.SiteSettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List allowed dashboard extensions on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard/safeListItems(DashboardExtensionsServerSettingsService_getDashboardExtensionsSafeListItemsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.SafeListItems|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get allowed dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard/safeListItems/[string safe_list_item_luid](DashboardExtensionsSiteSettingsService_getDashboardExtensionsSafeListItemHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.SafeListItem|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems/${getEncodedUri(safe_list_item_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get Content Suggestions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get api/\-/suggestions(map<string|string[]> headers = {}, *ContentExploration_getSuggestionsQueries queries) returns tableau\.search\.SearchResultsRepresentationV2|error {
        string resourcePath = string `/api/-/suggestions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function patch api/\-/pulse/definitions/[string definition_id](tableau\.metricqueryservice\.v1\.UpdateDefinitionRequest payload, MetricQueryService_UpdateDefinitionHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.UpdateDefinitionResponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definition_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.UpdateDefinitionRequest+json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update metric
    #
    # + metric_id - _(Required)_ The LUID of the metric to be updated.
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function patch api/\-/pulse/metrics/[string metric_id](tableau\.metricqueryservice\.v1\.UpdateMetricRequest payload, MetricQueryService_UpdateMetricHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.UpdateMetricResponse|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metric_id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.UpdateMetricRequest+json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Create ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/askdata/lenses(tableau\.nlp\.lens\.publicrest\.v1\.CreateLensRequest payload, LensService_createLensHeaders headers = {}) returns tableau\.nlp\.lens\.publicrest\.v1\.CreateLensResponse|error {
        string resourcePath = string `/api/-/askdata/lenses`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.nlp.lens.publicrest.v1.CreateLensRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/askdata/lenses/'import(tableau\.nlp\.lens\.publicrest\.v1\.ImportLensRequest payload, LensService_importLensHeaders headers = {}) returns tableau\.nlp\.lens\.publicrest\.v1\.ImportLensResponse|error {
        string resourcePath = string `/api/-/askdata/lenses/import`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.nlp.lens.publicrest.v1.ImportLensRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/auth\-configurations(tableau\.authn\.v1\.RegisterAuthConfigurationRequest payload, AuthnService_RegisterAuthConfigurationHeaders headers = {}) returns tableau\.authn\.v1\.RegisterAuthConfigurationResponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterAuthConfigurationRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/identity\-pools(tableau\.authn\.v1\.RegisterIdentityPoolRequest payload, AuthnService_RegisterIdentityPoolHeaders headers = {}) returns tableau\.authn\.v1\.RegisterIdentityPoolResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterIdentityPoolRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/identity\-stores(tableau\.authn\.v1\.RegisterIdentityStoreRequest payload, AuthnService_RegisterIdentityStoreTAGHeaders headers = {}) returns tableau\.authn\.v1\.RegisterIdentityStoreResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-stores`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterIdentityStoreRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/content/usage\-stats(tableau\.usagestats\.v1\.BatchGetUsageRequest payload, UsageStatsService_BatchGetUsageHeaders headers = {}) returns tableau\.usagestats\.v1\.ContentItemUsageStatsList|error {
        string resourcePath = string `/api/-/content/usage-stats`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.usagestats.v1.BatchGetUsageRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/definitions(tableau\.metricqueryservice\.v1\.CreateDefinitionRequest payload, MetricQueryService_CreateDefinitionHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.CreateDefinitionResponse|error {
        string resourcePath = string `/api/-/pulse/definitions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.CreateDefinitionRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate current metric value insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/ban(tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleBANRequest payload, PulseInsightsService_GenerateInsightBundleBANHeaders headers = {}) returns tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleBANResponse|error {
        string resourcePath = string `/api/-/pulse/insights/ban`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleBANRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate detail insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/detail(tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleDetailRequest payload, PulseInsightsService_GenerateInsightBundleDetailHeaders headers = {}) returns tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleDetailResponse|error {
        string resourcePath = string `/api/-/pulse/insights/detail`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleDetailRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate springboard insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/springboard(tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleSpringboardRequest payload, PulseInsightsService_GenerateInsightBundleSpringboardHeaders headers = {}) returns tableau\.pulse\.insightsservice\.v1\.GenerateInsightBundleSpringboardResponse|error {
        string resourcePath = string `/api/-/pulse/insights/springboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleSpringboardRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create metric
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/metrics(tableau\.metricqueryservice\.v1\.CreateMetricRequest payload, MetricQueryService_CreateMetricHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.CreateMetricResponse|error {
        string resourcePath = string `/api/-/pulse/metrics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.CreateMetricRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/pulse/metrics\:getOrCreate(tableau\.metricqueryservice\.v1\.GetOrCreateMetricRequest payload, MetricQueryService_GetOrCreateMetricHeaders headers = {}) returns tableau\.metricqueryservice\.v1\.GetOrCreateMetricResponse|error {
        string resourcePath = string `/api/-/pulse/metrics:getOrCreate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.GetOrCreateMetricRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/subscriptions(tableau\.pulse\.subscriptionservice\.v1\.CreateSubscriptionRequest payload, PulseSubscriptionService_CreateSubscriptionHeaders headers = {}) returns tableau\.pulse\.subscriptionservice\.v1\.CreateSubscriptionResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.subscriptionservice.v1.CreateSubscriptionRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/pulse/subscriptions\:batchCreate(tableau\.pulse\.subscriptionservice\.v1\.BatchCreateSubscriptionsRequest payload, PulseSubscriptionService_BatchCreateSubscriptionsHeaders headers = {}) returns tableau\.pulse\.subscriptionservice\.v1\.BatchCreateSubscriptionsResponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchCreate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.subscriptionservice.v1.BatchCreateSubscriptionsRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Block dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/server/extensions/dashboard/blockListItems(tableau\.extensions\.dashboard\.v1\.BlockListItem payload, DashboardExtensionsServerSettingsService_createDashboardExtensionsBlockListItemHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.BlockListItem|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add analytics extension connection to site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/site/extensions/analytics/connections(tableau\.analyticsextensions\.v1\.ConnectionItem payload, AnalyticsExtensionsService_addAnalyticsExtensionsConnectionHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionMetadataList|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Allow dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/site/extensions/dashboard/safeListItems(tableau\.extensions\.dashboard\.v1\.SafeListItem payload, DashboardExtensionsServerSettingsService_createDashboardExtensionsSafeListItemHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.SafeListItem|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/authn\-service/auth\-configurations/[int:Signed32 id](tableau\.authn\.v1\.UpdateAuthConfigurationRequest payload, AuthnService_UpdateAuthConfigurationHeaders headers = {}) returns tableau\.authn\.v1\.UpdateAuthConfigurationResponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.UpdateAuthConfigurationRequest+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/authn\-service/identity\-pools/[string uuid](tableau\.authn\.v1\.UpdateIdentityPoolRequest payload, AuthnService_UpdateIdentityPoolHeaders headers = {}) returns tableau\.authn\.v1\.UpdateIdentityPoolResponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.UpdateIdentityPoolRequest+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Enable or disable analytics extensions on server
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/server/extensions/analytics(tableau\.analyticsextensions\.v1\.ServerSettings payload, AnalyticsExtensionsService_updateAnalyticsExtensionsServerSettingsHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ServerSettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ServerSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update dashboard extensions settings of server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/server/extensions/dashboard(tableau\.extensions\.dashboard\.v1\.ServerSettings payload, DashboardExtensionsServerSettingsService_updateDashboardExtensionsServerSettingsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.ServerSettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update enabled state of analytics extensions on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics(tableau\.analyticsextensions\.v1\.SiteSettings payload, AnalyticsExtensionsService_updateAnalyticsExtensionsSiteSettingsHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.SiteSettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.SiteSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update analytics extension connection of site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics/connections/[string connection_luid](tableau\.analyticsextensions\.v1\.ConnectionItem payload, AnalyticsExtensionsService_updateAnalyticsExtensionsConnectionHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionItem|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connection_luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update analytics extension for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics/workbooks/[string workbook_luid]/selected_connection(tableau\.analyticsextensions\.v1\.ConnectionMapping payload, AnalyticsExtensionsService_updateWorkbookWithConnectionHeaders headers = {}) returns tableau\.analyticsextensions\.v1\.ConnectionMapping|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbook_luid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update dashboard extension settings of site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/dashboard(tableau\.extensions\.dashboard\.v1\.SiteSettings payload, DashboardExtensionsSiteSettingsService_updateDashboardExtensionsSiteSettingsHeaders headers = {}) returns tableau\.extensions\.dashboard\.v1\.SiteSettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }
}
